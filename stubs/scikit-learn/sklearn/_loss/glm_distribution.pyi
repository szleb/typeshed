from abc import ABCMeta, abstractmethod
from collections import namedtuple as namedtuple

from numpy import ndarray
from scipy.special import xlogy as xlogy

from .._typing import ArrayLike, Float

DistributionBoundary = ...

class ExponentialDispersionModel(metaclass=ABCMeta):
    def in_y_range(self, y: ArrayLike) -> None: ...
    @abstractmethod
    def unit_variance(self, y_pred: ArrayLike) -> None: ...
    @abstractmethod
    def unit_deviance(self, y: ArrayLike, y_pred: ArrayLike, check_input: bool = False) -> ndarray: ...
    def unit_deviance_derivative(self, y: ArrayLike, y_pred: ArrayLike) -> None: ...
    def deviance(self, y: ArrayLike, y_pred: ArrayLike, weights: ArrayLike | int = 1) -> None: ...
    def deviance_derivative(self, y: ArrayLike, y_pred: ArrayLike, weights: ArrayLike | int = 1) -> None: ...

class TweedieDistribution(ExponentialDispersionModel):
    def __init__(self, power: Float = 0) -> None: ...
    @property
    def power(self) -> None: ...
    @power.setter
    def power(self, power) -> None: ...
    def unit_variance(self, y_pred: ArrayLike) -> None: ...
    def unit_deviance(self, y: ArrayLike, y_pred: ArrayLike, check_input: bool = False) -> ndarray: ...

class NormalDistribution(TweedieDistribution):
    def __init__(self) -> None: ...

class PoissonDistribution(TweedieDistribution):
    def __init__(self) -> None: ...

class GammaDistribution(TweedieDistribution):
    def __init__(self) -> None: ...

class InverseGaussianDistribution(TweedieDistribution):
    def __init__(self) -> None: ...

EDM_DISTRIBUTIONS: dict = ...
