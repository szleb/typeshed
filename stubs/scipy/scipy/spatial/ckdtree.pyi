# Python: 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Library: scipy, version: 1.6.2
# Module: scipy.spatial.ckdtree, version: unspecified
import builtins as _mod_builtins
import typing

def __pyx_unpickle_Enum() -> typing.Any: ...
def __pyx_unpickle_cKDTreeNode() -> typing.Any: ...

__test__: dict

class cKDTree(_mod_builtins.object):
    def __getstate__(self) -> typing.Any: ...
    def __init__(self, data, leafsize=..., compact_nodes=..., copy_data=..., balanced_tree=..., boxsize=...) -> None: ...
    @classmethod
    def __init_subclass__(cls) -> None: ...
    __pyx_vtable__: object
    def __reduce_cython__(self) -> typing.Any: ...
    def __setstate__(self, state: typing.Any) -> None: ...
    def __setstate_cython__(self) -> typing.Any: ...
    @classmethod
    def __subclasshook__(cls, subclass: typing.Any) -> bool: ...
    def _build_weights(self, weights) -> typing.Any: ...
    @property
    def boxsize(self) -> typing.Any: ...
    def count_neighbors(self, other, r, p=..., weights=..., cumulative=...) -> typing.Any: ...
    @property
    def data(self) -> typing.Any: ...
    @property
    def indices(self) -> typing.Any: ...
    @property
    def leafsize(self) -> typing.Any: ...
    @property
    def m(self) -> typing.Any: ...
    @property
    def maxes(self) -> typing.Any: ...
    @property
    def mins(self) -> typing.Any: ...
    @property
    def n(self) -> typing.Any: ...
    def query(self, x, k=..., eps=..., p=..., distance_upper_bound=..., workers=...) -> typing.Any: ...
    def query_ball_point(self, x, r, p=..., eps=..., workers=..., return_sorted=..., return_length=...) -> typing.Any: ...
    def query_ball_tree(self, other, r, p=..., eps=...) -> typing.Any: ...
    def query_pairs(self, r, p=..., eps=...) -> typing.Any: ...
    @property
    def size(self) -> typing.Any: ...
    def sparse_distance_matrix(self, other, max_distance, p=...) -> typing.Any: ...
    @property
    def tree(self) -> typing.Any: ...
    def __getattr__(self, name) -> typing.Any: ...

class cKDTreeNode(_mod_builtins.object):
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __init_subclass__(cls) -> None: ...
    __pyx_vtable__: object
    def __reduce__(self) -> str | tuple[typing.Any, ...]: ...
    def __setstate__(self, state: typing.Any) -> None: ...
    @classmethod
    def __subclasshook__(cls, subclass: typing.Any) -> bool: ...
    @property
    def children(self) -> typing.Any: ...
    @property
    def data_points(self) -> typing.Any: ...
    @property
    def end_idx(self) -> typing.Any: ...
    @property
    def greater(self) -> typing.Any: ...
    @property
    def indices(self) -> typing.Any: ...
    @property
    def lesser(self) -> typing.Any: ...
    @property
    def level(self) -> typing.Any: ...
    @property
    def split(self) -> typing.Any: ...
    @property
    def split_dim(self) -> typing.Any: ...
    @property
    def start_idx(self) -> typing.Any: ...
    def __getattr__(self, name) -> typing.Any: ...

class coo_entries(_mod_builtins.object):
    @property
    def __array_interface__(self) -> typing.Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __init_subclass__(cls) -> None: ...
    def __reduce__(self) -> str | tuple[typing.Any, ...]: ...
    def __setstate__(self, state: typing.Any) -> None: ...
    @classmethod
    def __subclasshook__(cls, subclass: typing.Any) -> bool: ...
    def coo_matrix(self) -> typing.Any: ...
    def dict(self) -> typing.Any: ...
    def dok_matrix(self) -> typing.Any: ...
    def ndarray(self) -> typing.Any: ...
    def __getattr__(self, name) -> typing.Any: ...

class ordered_pairs(_mod_builtins.object):
    @property
    def __array_interface__(self) -> typing.Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __init_subclass__(cls) -> None: ...
    def __reduce__(self) -> str | tuple[typing.Any, ...]: ...
    def __setstate__(self, state: typing.Any) -> None: ...
    @classmethod
    def __subclasshook__(cls, subclass: typing.Any) -> bool: ...
    def ndarray(self) -> typing.Any: ...
    def set(self) -> typing.Any: ...
    def __getattr__(self, name) -> typing.Any: ...

def __getattr__(name) -> typing.Any: ...
