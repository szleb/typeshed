# Python: 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Library: scipy, version: 1.6.2
# Module: scipy.spatial.transform.rotation, version: unspecified
import builtins as _mod_builtins
import typing

class Rotation(_mod_builtins.object):
    def __getitem__(self, index: int) -> typing.Any: ...
    def __getstate__(self) -> typing.Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __init_subclass__(cls) -> None: ...
    def __len__(self) -> int: ...
    def __mul__(self) -> Rotation: ...
    def __reduce_cython__(self) -> typing.Any: ...
    def __rmul__(self, value) -> Rotation: ...
    def __setstate__(self, state: typing.Any) -> None: ...
    def __setstate_cython__(self) -> typing.Any: ...
    @classmethod
    def __subclasshook__(cls, subclass: typing.Any) -> bool: ...
    @classmethod
    def align_vectors(cls) -> typing.Any: ...
    def apply(self) -> typing.Any: ...
    def as_euler(self) -> typing.Any: ...
    def as_matrix(self) -> typing.Any: ...
    def as_mrp(self) -> typing.Any: ...
    def as_quat(self) -> typing.Any: ...
    def as_rotvec(self) -> typing.Any: ...
    @classmethod
    def create_group(cls) -> typing.Any: ...
    @classmethod
    def from_euler(cls) -> typing.Any: ...
    @classmethod
    def from_matrix(cls) -> typing.Any: ...
    @classmethod
    def from_mrp(cls) -> typing.Any: ...
    @classmethod
    def from_quat(cls) -> typing.Any: ...
    @classmethod
    def from_rotvec(cls) -> typing.Any: ...
    @classmethod
    def identity(cls) -> typing.Any: ...
    def inv(self) -> typing.Any: ...
    def magnitude(self) -> typing.Any: ...
    def mean(self) -> typing.Any: ...
    @classmethod
    def random(cls) -> typing.Any: ...
    def reduce(self) -> typing.Any: ...
    @property
    def single(self) -> typing.Any: ...
    def __getattr__(self, name) -> typing.Any: ...

class Slerp(_mod_builtins.object):
    def __call__(self, times) -> typing.Any: ...
    __dict__: dict[str, typing.Any]
    def __init__(self, times, rotations) -> None: ...
    @classmethod
    def __init_subclass__(cls) -> None: ...
    __module__: str
    @classmethod
    def __subclasshook__(cls, subclass: typing.Any) -> bool: ...
    @property
    def __weakref__(self) -> typing.Any: ...
    def __getattr__(self, name) -> typing.Any: ...

def __pyx_unpickle_Enum() -> typing.Any: ...
def __pyx_unpickle_Rotation() -> typing.Any: ...

__test__: dict

def check_random_state(seed) -> typing.Any: ...
def create_group(cls, group, axis) -> typing.Any: ...
def __getattr__(name) -> typing.Any: ...
